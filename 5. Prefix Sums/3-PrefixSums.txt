// prefix sums = consecutive totals of the first 0, 1, 2, . . . , n elements of an array. O(n)
// suffix sums = the totals of the k last values.

// Using prefix (or suffix) sums allows us to calculate the total of any slice of the array very quickly.

// a0		a0			a1				a2					...		an−1
// p0 = 0	p1 = a0		p2 = a0 + a1	p3 = a0 + a1 + a2	...		pn = a0 + a1 + ... + an−1	

// pk = pk-1 + ak-1 (consecutive value can be calculated in a constant time.)
// p1 = a0
// pn = a0 + a1 + ... + an−1

// _ = 0
// py+1 = a0 + a1 + ... + ax-1 + ax + ax+1 + ... + ay-1 + ay
// px = a0 + a1 + ... + ax-1 + _ + _ + _ + _ + _
// py+1 - px = _ + _ + _ + _ + ax + ax+1 + ... + ay-1 + ay

// totals of m slices [x..y] such that 0 <= x <= y < n, where the total is the sum ax + ax+1 + ... + ay−1 + ay.
// = py+1 - px  (O(1))


// ax		0	1	2	3	4
// a		1	2	3	4	5

// px	0	1	2	3	4	5 (Should start indexing from 0, ***px is 1 greater than ax: px = ax + 1)
// pn	0	1	3	6	10	15

// Sum slice ax[1..3] = 2 + 3 + 4 = 9
// Sum slice ax[1..3] = py+1 - px = p4 - p1 = 10 - 1 = 9 (O(1

----------------------------------------------------------------------------------------------------------------
5.1. Exercise
5.3: Mushroom picker — O(n + m)
// calculate the maximum number of mushrooms that the mushroom
picker can collect in m moves.

// A of n (1 <= n <= 100 000) integers a0, a1, ..., an−1 (0 <= ai <= 1 000).
// picker is at spot number k on the road and should perform m moves.
// You are also given integers k and m (0 <= k, m < n).

// m moves in one direction
// m − p moves in the opposite direction

// left_pos = possible left end positions
// right_pos = possible right end positions
// p = one trip
// 2 * p = round trip

array A
A	2	3	7	5	1	3	9
n	0	1	2	3	4	5	6

P	0	2	5	12	17	18	21	30	
k	0	1	2	3	4	5	6	7

// 1st for loop (left trip first)
left_pos	4	3	2	1	0
right_pos	6	6	6	4	4

// 2nd for loop (right trip first)
right_pos	4	5	6
left_pos	0	0	2
